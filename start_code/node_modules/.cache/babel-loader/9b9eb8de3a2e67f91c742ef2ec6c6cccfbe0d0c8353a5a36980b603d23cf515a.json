{"ast":null,"code":"var _jsxFileName = \"/Users/williamdorling/bnta_work/week_09/day_3/task_BNTA_bakery/start_code/src/cake/CakeContainer.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Cake from \"./Cake.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CakeContainer = () => {\n  _s();\n  const [listOfCakes, setListOfCakes] = useState([{\n    cakeName: \"Victoria Sponge\",\n    ingredients: [\"eggs\", \"butter\", \"sugar\", \"self-raising flour\", \"baking powder\", \"milk\"],\n    price: 5,\n    rating: 5\n  }, {\n    cakeName: \"Tea Loaf\",\n    ingredients: [\"eggs\", \"oil\", \"dried fruit\", \"sugar\", \"self-raising flour\", \"strong tea\"],\n    price: 2,\n    rating: 3\n  }, {\n    cakeName: \"Carrot Cake\",\n    ingredients: [\"carrots\", \"walnuts\", \"oil\", \"cream cheese\", \"flour\", \"sugar\"],\n    price: 8,\n    rating: 5\n  }]);\n  // let cake;\n  // for(cake of listOfCakes){\n  // \treturn(\n  // \t\t<>\n  // \t\t\t<Cake cakeName={cake.cakeName} \n  // \t\t\tingredients={cake.ingredients} \n  // \t\t\tprice={cake.price} \n  // \t\t\trating={cake.rating}/>\n  // \t\t</>\n  // \t)\n  // }\n\n  let cakeList = listOfCakes.map(cake => /*#__PURE__*/_jsxDEV(Cake, {\n    cakeName: cake.cakeName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 41\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cakeList[0]\n  }, void 0, false);\n\n  //   return (\n  //     <>\n  //         <Cake cakeName={listOfCakes[0].cakeName} \n  // \t\t\tingredients={listOfCakes[0].ingredients} \n  // \t\t\tprice={listOfCakes[0].price} \n  // \t\t\trating={listOfCakes[0].rating}/>\n  //         <Cake cakeName={listOfCakes[1].cakeName} \n  // \t\t\tingredients={listOfCakes[1].ingredients} \n  // \t\t\tprice={listOfCakes[1].price} \n  // \t\t\trating={listOfCakes[1].rating}/>\n  //         <Cake cakeName={listOfCakes[2].cakeName} \n  // \t\t\tingredients={listOfCakes[2].ingredients} \n  // \t\t\tprice={listOfCakes[2].price} \n  // \t\t\trating={listOfCakes[2].rating}/>\n  //     </>\n  //   )\n};\n_s(CakeContainer, \"MjfFuAR89pJOKJr8TPM9YOFhBvc=\");\n_c = CakeContainer;\nexport default CakeContainer;\nvar _c;\n$RefreshReg$(_c, \"CakeContainer\");","map":{"version":3,"names":["useState","Cake","jsxDEV","_jsxDEV","Fragment","_Fragment","CakeContainer","_s","listOfCakes","setListOfCakes","cakeName","ingredients","price","rating","cakeList","map","cake","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/Users/williamdorling/bnta_work/week_09/day_3/task_BNTA_bakery/start_code/src/cake/CakeContainer.js"],"sourcesContent":["import { useState } from \"react\";\nimport Cake from \"./Cake.js\";\n\nconst CakeContainer = () => {\n\n    const [listOfCakes, setListOfCakes] = useState(\n\t\t[\n\t\t\t{\n\t\t\t\tcakeName: \"Victoria Sponge\",\n\t\t\t\t   ingredients: [\n\t\t\t\t\t   \"eggs\",\n\t\t\t\t\t  \"butter\",\n\t\t\t\t\t  \"sugar\",\n\t\t\t\t\t  \"self-raising flour\",\n\t\t\t\t\t  \"baking powder\",\n\t\t\t\t\t  \"milk\"\n\t\t\t\t  ],\n\t\t\t\t  price: 5,\n\t\t\t\t   rating: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\t cakeName: \"Tea Loaf\",\n\t\t\t\t   ingredients: [\n\t\t\t\t\t   \"eggs\",\n\t\t\t\t\t  \"oil\",\n\t\t\t\t\t  \"dried fruit\",\n\t\t\t\t\t  \"sugar\",\n\t\t\t\t\t  \"self-raising flour\",\n\t\t\t\t\t  \"strong tea\",\n\t\t\t\t  ],\n\t\t\t\t  price: 2,\n\t\t\t\t  rating: 3\n\t\t\t},\n\t\t\t{\n\t\t\t\t cakeName: \"Carrot Cake\",\n\t\t\t\t   ingredients: [\n\t\t\t\t\t\"carrots\",\n\t\t\t\t\t  \"walnuts\",\n\t\t\t\t\t  \"oil\",\n\t\t\t\t\t  \"cream cheese\",\n\t\t\t\t\t  \"flour\",\n\t\t\t\t\t  \"sugar\",\n\t\t\t\t   ],\n\t\t\t\t   price: 8,\n\t\t\t\t   rating: 5\n\t\t\t} \n\t\t]\t\t\n\t)\n\t// let cake;\n\t// for(cake of listOfCakes){\n\t// \treturn(\n\t// \t\t<>\n\t// \t\t\t<Cake cakeName={cake.cakeName} \n\t// \t\t\tingredients={cake.ingredients} \n\t// \t\t\tprice={cake.price} \n\t// \t\t\trating={cake.rating}/>\n\t// \t\t</>\n\t// \t)\n\t// }\n\n\tlet cakeList = listOfCakes.map(cake => <Cake cakeName={cake.cakeName} />)\n\n\treturn (\n\t\t<>\n\t\t\t{cakeList[0]}\n\t\t</>\n\t)\n\n\n//   return (\n//     <>\n//         <Cake cakeName={listOfCakes[0].cakeName} \n// \t\t\tingredients={listOfCakes[0].ingredients} \n// \t\t\tprice={listOfCakes[0].price} \n// \t\t\trating={listOfCakes[0].rating}/>\n//         <Cake cakeName={listOfCakes[1].cakeName} \n// \t\t\tingredients={listOfCakes[1].ingredients} \n// \t\t\tprice={listOfCakes[1].price} \n// \t\t\trating={listOfCakes[1].rating}/>\n//         <Cake cakeName={listOfCakes[2].cakeName} \n// \t\t\tingredients={listOfCakes[2].ingredients} \n// \t\t\tprice={listOfCakes[2].price} \n// \t\t\trating={listOfCakes[2].rating}/>\n//     </>\n//   )\n}\n\nexport default CakeContainer;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAExB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAChD,CACC;IACCU,QAAQ,EAAE,iBAAiB;IACxBC,WAAW,EAAE,CACZ,MAAM,EACP,QAAQ,EACR,OAAO,EACP,oBAAoB,EACpB,eAAe,EACf,MAAM,CACN;IACDC,KAAK,EAAE,CAAC;IACPC,MAAM,EAAE;EACZ,CAAC,EACD;IACEH,QAAQ,EAAE,UAAU;IAClBC,WAAW,EAAE,CACZ,MAAM,EACP,KAAK,EACL,aAAa,EACb,OAAO,EACP,oBAAoB,EACpB,YAAY,CACZ;IACDC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;EACX,CAAC,EACD;IACEH,QAAQ,EAAE,aAAa;IACrBC,WAAW,EAAE,CACf,SAAS,EACP,SAAS,EACT,KAAK,EACL,cAAc,EACd,OAAO,EACP,OAAO,CACN;IACDC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;EACZ,CAAC,CAEH,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIC,QAAQ,GAAGN,WAAW,CAACO,GAAG,CAACC,IAAI,iBAAIb,OAAA,CAACF,IAAI;IAACS,QAAQ,EAAEM,IAAI,CAACN;EAAS;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,CAAC;EAEzE,oBACCjB,OAAA,CAAAE,SAAA;IAAAgB,QAAA,EACEP,QAAQ,CAAC,CAAC;EAAC,gBACX,CAAC;;EAIL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA,CAAC;AAAAP,EAAA,CAlFKD,aAAa;AAAAgB,EAAA,GAAbhB,aAAa;AAoFnB,eAAeA,aAAa;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}